[웹서버컴퓨팅 과제 9] Django 기반 도서 대출 시스템의 서비스 레이어 분리 및 예외 처리
## 🔍 과제 주안점:

- View-Logic 분리 구조
- ORM 함수의 책임 분리 (조회 vs 표현)
- 단위 테스트로 검증 가능한 서비스 구조
- 사용자 정의 예외 처리 설계

과제 구성 설명 
1. 클래스 메소드 vs 서비스 레이어 비교 
2. 클래스 메소드 [이전 과제 5] vs 서비스 레이어의 구분 (이전 과제 5와 비교) 
3.  뷰(View)와 서비스(Service Layer) 분리에 사용된 ORM
4.  가장 자주 쓰는 Django ORM 명령어 
7.  책(Book) 데이터 자동 생성
8.  대출 이력(BorrowHistory) 자동 생성  
9.  예외 처리 포함 서비스 함수 
10.  Django에서의 예외 클래스(Exception Class)
11.  사용자 정의 예외
12.  단위 테스트
13. 과제 결과 화면  

✅ 깃허브 제출 링크 : 1점

과제 코딩 채워넣기 부분 : 총 39점

5.  뷰(View) 와 서비스(Service Layer) 분리 이점 : 총 6점 
✅ 2. 서비스 코드 (services/book_service.py) : 3점 
✅ 3. 뷰 코드 (views.py) — 서비스 호출만 수행 : 3점

6.  뷰(View) 와 서비스(Service Layer) 분리 예제 : 총 8점 
✅ URL 설정 — library/urls.py : 3점 
✅ 뷰 구현 — views.py  : 3점
✅ 템플릿 생성 :  2점 


9.  예외 처리 포함 서비스 함수 : 총 6점  
✅ 서비스 레이어 예제 (services/book_service.py) : 4점 
✅ 뷰 예제 (views.py)에서의 예외 처리 : 2점  


12.  단위 테스트 : 총 15점 
✅ 테스트 코드 예시: tests/test_services.py : 6점
✅ 3. 테스트 코드 (tests/test_services.py) : 9점  


13.  결과 확인 : 총 4점  
✅ 전체 책 목록 보기 화면 캡쳐 : 1점   
✅ 특정 책의 대출 이력 확인 (대출 이력이 없는 경우 화면 캡쳐)  : 1점  
✅ 특정 책의 대출 이력 확인 (대출 이력이 있는 경우 화면 캡쳐)  : 1점 
✅ 단위 테스트 결과 성공 화면 캡쳐 : 1점   
